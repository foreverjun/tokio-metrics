use crate::RuntimeMetrics;

#[derive(serde::Serialize, Debug)]
pub struct MetricsSerializable{
    iteration: usize,
    workers_count: usize,
    total_park_count: u64,
    max_park_count: u64,
    min_park_count: u64,
    mean_poll_duration: u128,
    mean_poll_duration_worker_min: u128,
    mean_poll_duration_worker_max: u128,
    total_noop_count: u64,
    max_noop_count: u64,
    min_noop_count: u64,
    total_steal_count: u64,
    max_steal_count: u64,
    min_steal_count: u64,
    total_steal_operations: u64,
    max_steal_operations: u64,
    min_steal_operations: u64,
    num_remote_schedules: u64,
    total_local_schedule_count: u64,
    max_local_schedule_count: u64,
    min_local_schedule_count: u64,
    total_overflow_count: u64,
    max_overflow_count: u64,
    min_overflow_count: u64,
    total_polls_count: u64,
    max_polls_count: u64,
    min_polls_count: u64,
    total_busy_duration: u128,
    max_busy_duration: u128,
    min_busy_duration: u128,
    global_queue_depth: usize,
    total_local_queue_depth: usize,
    max_local_queue_depth: usize,
    min_local_queue_depth: usize,
    elapsed: u128,
    budget_forced_yield_count: u64,
    io_driver_ready_count: u64,

}

impl MetricsSerializable {
    pub fn new(iteration: usize,  metrics : &RuntimeMetrics) -> Self {
        MetricsSerializable{
            iteration,
            workers_count : metrics.workers_count,
            total_park_count : metrics.total_park_count,
            max_park_count: metrics.max_park_count,
            min_park_count: metrics.min_park_count,
            mean_poll_duration: metrics.mean_poll_duration.as_micros(),
            mean_poll_duration_worker_min: metrics.mean_poll_duration_worker_min.as_micros(),
            mean_poll_duration_worker_max: metrics.mean_poll_duration_worker_max.as_micros(),
            total_noop_count: metrics.total_noop_count ,
            max_noop_count: metrics.max_noop_count,
            min_noop_count: metrics.min_noop_count,
            total_steal_count: metrics.total_steal_count,
            max_steal_count: metrics.max_steal_count,
            min_steal_count: metrics.min_steal_count,
            total_steal_operations: metrics.total_steal_operations,
            max_steal_operations: metrics.max_steal_operations,
            min_steal_operations: metrics.min_steal_operations,
            num_remote_schedules: metrics.num_remote_schedules,
            total_local_schedule_count: metrics.total_local_schedule_count,
            max_local_schedule_count: metrics.max_local_schedule_count,
            min_local_schedule_count: metrics.min_local_schedule_count,
            total_overflow_count: metrics.total_overflow_count,
            max_overflow_count: metrics.max_overflow_count,
            min_overflow_count: metrics.min_overflow_count,
            total_polls_count: metrics.total_polls_count,
            max_polls_count: metrics.max_polls_count,
            min_polls_count: metrics.min_polls_count,
            total_busy_duration: metrics.total_busy_duration.as_micros(),
            max_busy_duration: metrics.max_busy_duration.as_micros(),
            min_busy_duration: metrics.min_busy_duration.as_micros(),
            global_queue_depth: metrics.global_queue_depth,
            total_local_queue_depth: metrics.total_local_queue_depth,
            max_local_queue_depth: metrics.max_local_queue_depth,
            min_local_queue_depth: metrics.min_local_queue_depth,
            elapsed: metrics.elapsed.as_micros(),
            budget_forced_yield_count: metrics.budget_forced_yield_count,
            io_driver_ready_count: metrics.io_driver_ready_count,
        }
    }
}
